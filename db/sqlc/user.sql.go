// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    permgroup_id,
    name,
    email,
    password_hash
) VALUES (
    $1, $2, $3, $4
) RETURNING id, permgroup_id, name, email, password_hash, bio, created_at
`

type CreateUserParams struct {
	PermgroupID  int32  `json:"permgroup_id"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.PermgroupID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PermgroupID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getDashboard = `-- name: GetDashboard :one
SELECT 
    (SELECT COUNT(*) FROM posts WHERE user_id = $1) AS user_posts,
    (SELECT COUNT(*) FROM comments WHERE user_id = $1) AS user_comments
`

type GetDashboardRow struct {
	UserPosts    int64 `json:"user_posts"`
	UserComments int64 `json:"user_comments"`
}

func (q *Queries) GetDashboard(ctx context.Context, dollar_1 sql.NullInt64) (GetDashboardRow, error) {
	row := q.db.QueryRowContext(ctx, getDashboard, dollar_1)
	var i GetDashboardRow
	err := row.Scan(&i.UserPosts, &i.UserComments)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, permgroup_id, name, email, password_hash, bio, created_at FROM users 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PermgroupID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, permgroup_id, name, email, password_hash, bio, created_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PermgroupID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, created_at FROM users
ORDER BY id
`

type ListUsersRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
